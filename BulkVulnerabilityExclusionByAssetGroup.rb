#Use this to bulk exclude a vulnerability on all assets in an asset group.
#You can exclude all instances or just an instance on a particular port.
#If you are only excluding a specific instance you will need to specify the port number.

#!/usr/bin/env ruby

require 'nexpose'
require 'optparse'
require 'io/console'

# If these entries are set here (not blank) this script will not prompt for user input
# Note that if your input contains apostrophes it must be surrounded by double quotes instead of single
# ie. if the password is Joe'sPassword then use password="" instead of password=''
host=''
port='3780'
user=''
password=''
vuln_id=''
asset_group_name=''
vuln_scope=''
vuln_reason=''
vuln_port=''


if host == ''
  print "Nexpose IP: "
  host = gets.chomp
end

if port == ''
  print "Nexpose port: "
  port = gets.chomp
end

if user == ''
  print "User: "
  user = gets.chomp
end

def get_password(prompt='Password: ')
  print prompt
  STDIN.noecho(&:gets).chomp
end

if password == ''
  password = get_password
end

if vuln_id == ''
  puts
  print "Vulnerability ID: "
  vuln_id = gets.chomp
end

if vuln_scope == ''
  puts "Which Vulnerability Scope:"
puts 
puts "1. All Instances on a Specific Asset"
puts "2. Specific Instance of Specific Asset"
puts
puts "(anything else will exit the program)"

user_input = Integer(gets.chomp)

	if user_input == 1
    vuln_scope ='All Instances on a Specific Asset'
	else user_input == 2
    vuln_scope ='Specific Instance of Specific Asset'
	end
end

if vuln_reason == ''
  puts "Which Vulnerability Reason:"
puts 
puts "1. False Positive"
puts "2. Compensating Control"
puts "3. Acceptable Use"
puts "4. Acceptable Risk"
puts "5. Other"
puts
puts "(anything else will exit the program)"

user_input = Integer(gets.chomp)

	if user_input == 1
    vuln_reason ='False Positive'
	elsif user_input == 2
    vuln_reason ='Compensating Control'
	elsif user_input == 3
    vuln_reason ='Acceptable Use'
	elsif user_input == 4
    vuln_reason ='Acceptable Risk'
	else user_input == 5
    vuln_reason ='Other'
	end
end

if asset_group_name == ''
  print "Asset Group Name: "
  asset_group_name = gets.chomp
  puts
end

nsc = Nexpose::Connection.new(host, user, password, port)

nsc.login
at_exit { nsc.logout }

if vuln_scope =='All Instances on a Specific Asset'
 group = nsc.groups.find { |g| g.name == asset_group_name }  
 assets = nsc.group_assets(group.id)  
 assets.each do |asset|  
	vuln_exception = Nexpose::VulnException.new(vuln_id, vuln_scope, vuln_reason)  
	vuln_exception.asset_id = asset.id 
	comment = ''
	vuln_exception.save(nsc, "#{group.name}") 
 end
else vuln_scope =='Specific Instance of Specific Asset'
 print "Vulnerability port: "
 vuln_port = gets.chomp
 group = nsc.groups.find { |g| g.name == asset_group_name }  
 assets = nsc.group_assets(group.id)  
 assets.each do |asset|  
	vuln_exception = Nexpose::VulnException.new(vuln_id, vuln_scope, vuln_reason)  
	vuln_exception.asset_id = asset.id 
	vuln_exception.port = vuln_port
	comment = ''
	vuln_exception.save(nsc, "#{group.name}") 
 end
end 
 
puts ''
puts 'Vulnerability successfully excluded!'
